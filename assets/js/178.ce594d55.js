(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{659:function(e,t,r){"use strict";r.r(t);var a=r(5),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h3",{attrs:{id:"浅拷贝和深拷贝的区别-实现深拷贝的方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝和深拷贝的区别-实现深拷贝的方法"}},[e._v("🌙")]),e._v(" 浅拷贝和深拷贝的区别,实现深拷贝的方法")]),e._v(" "),r("ul",[r("li",[e._v("深拷贝和浅拷贝是只针对 Object 和 Array 这样的引用数据类型")]),e._v(" "),r("li",[e._v("浅拷贝只复制指向某对象的指针,而不是复制对象本身,新旧对象还是共享一块内存.但深拷贝会另外创造一个一模一样的对象,新对象跟原对象不共享内存,修改新对象不会改到原对象")]),e._v(" "),r("li",[e._v("解构赋值")]),e._v(" "),r("li",[e._v("扩展运算符")])]),e._v(" "),r("h4",{attrs:{id:"json-parse-json-stringify"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#json-parse-json-stringify"}},[e._v("🌙")]),e._v(" JSON.parse(JSON.stringify())")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("let arr = [1, 3, {\n    username: ' kobe'\n}];\nlet arr4 = JSON.parse(JSON.stringify(arr));\narr4[2].username = 'duncan'; \nconsole.log(arr, arr4)\n\n")])])]),r("ul",[r("li",[e._v("原理: 用 JSON.stringify() 方法是将一个 javaScript 值(对象或者数组)转化成一个 JSON 字符串,不能接受函数")])]),e._v(" "),r("h4",{attrs:{id:"手写递归"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#手写递归"}},[e._v("🌙")]),e._v(" 手写递归")]),e._v(" "),r("ul",[r("li",[e._v("递归方法实现深度克隆原理: 便利对象,数组直到里边都是基本数据类型,然后再去复制,就是深度拷贝")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("    //定义检测数据类型的功能函数\n    function checkedType(target) {\n      return Object.prototype.toString.call(target).slice(8, -1)\n    }\n    //实现深度克隆---对象/数组\n    function clone(target) {\n      //判断拷贝的数据类型\n      //初始化变量result 成为最终克隆的数据\n      let result, targetType = checkedType(target)\n      if (targetType === 'Object') {\n        result = {}\n      } else if (targetType === 'Array') {\n        result = []\n      } else {\n        return target\n      }\n      //遍历目标数据\n      for (let i in target) {\n        //获取遍历数据结构的每一项值。\n        let value = target[i]\n        //判断目标结构里的每一值是否存在对象/数组\n        if (checkedType(value) === 'Object' ||\n          checkedType(value) === 'Array') { //对象/数组里嵌套了对象/数组\n          //继续遍历获取到value值\n          result[i] = clone(value)\n        } else { //获取到value值是基本的数据类型或者是函数。\n          result[i] = value;\n        }\n      }\n      return result\n    }\n\n\n")])])]),r("h3",{attrs:{id:"简述一下-this-在下列场景的指向"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简述一下-this-在下列场景的指向"}},[e._v("🌙")]),e._v(" 简述一下 this 在下列场景的指向")]),e._v(" "),r("ul",[r("li",[e._v("在构造函数中使用: 指向当前实例")]),e._v(" "),r("li",[e._v("作为对象时使用: 方法调用指向调用方法这个的对象")]),e._v(" "),r("li",[e._v("作为普通函数时使用: window")])])])}),[],!1,null,null,null);t.default=n.exports}}]);