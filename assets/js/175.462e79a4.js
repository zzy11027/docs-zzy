(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{657:function(t,e,v){"use strict";v.r(e);var _=v(5),a=Object(_.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("[toc]")]),t._v(" "),v("h1",{attrs:{id:"中科软面试题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#中科软面试题"}},[t._v("🌙")]),t._v(" 中科软面试题")]),t._v(" "),v("h3",{attrs:{id:"项目组几个人，怎么分的？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#项目组几个人，怎么分的？"}},[t._v("🌙")]),t._v(" 项目组几个人，怎么分的？")]),t._v(" "),v("ul",[v("li",[t._v("答: 三个后台 两个前端")])]),t._v(" "),v("h3",{attrs:{id:"vue项目的需求？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue项目的需求？"}},[t._v("🌙")]),t._v(" vue项目的需求？")]),t._v(" "),v("ul",[v("li",[t._v("答: 问的是项目的需求模块 回答时根据自己简历上项目答出项目的业务逻辑 主要功能 这些就是需求模块")])]),t._v(" "),v("h3",{attrs:{id:"做过几个vue项目？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#做过几个vue项目？"}},[t._v("🌙")]),t._v(" 做过几个vue项目？")]),t._v(" "),v("ul",[v("li",[t._v("答: 看你自己的简历上咋写的就咋答")])]),t._v(" "),v("h3",{attrs:{id:"vue的钩子函数（生命周期）？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue的钩子函数（生命周期）？"}},[t._v("🌙")]),t._v(" vue的钩子函数（生命周期）？")]),t._v(" "),v("ul",[v("li",[t._v("beforeCreate、created（创建前后）")]),t._v(" "),v("li",[t._v("beforeMount、mounted（挂载前后)")]),t._v(" "),v("li",[t._v("beforeUpdate、updated（数据更新前后、修改数据vm.$set会触发）")]),t._v(" "),v("li",[t._v("beforeDestroy（在这个钩子中清除定时器）、destroyed（销毁前后）")])]),t._v(" "),v("h4",{attrs:{id:"vue的路由跳转和传参？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue的路由跳转和传参？"}},[t._v("🌙")]),t._v(" vue的路由跳转和传参？")]),t._v(" "),v("ul",[v("li",[t._v("跳转：hash 和 history")])]),t._v(" "),v("blockquote",[v("p",[t._v("hash:实现原理就是根据不同的url进行解析，来匹配不同的组件；但当url发生变化时就会造成页面的刷新。这就出现了hash，使用hash在改变url的情况下，保证页面的不刷新。\nhistory需要服务端支持")])]),t._v(" "),v("ul",[v("li",[t._v("传参：params 参数 query 参数 路径（：后面写）")])]),t._v(" "),v("blockquote",[v("p",[t._v("对象中的query是路由后面的问号传参\nparams写在路由的斜杠后面")])]),t._v(" "),v("h3",{attrs:{id:"route和-router的区别？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#route和-router的区别？"}},[t._v("🌙")]),t._v(" $route和$router的区别？")]),t._v(" "),v("blockquote",[v("p",[t._v("上面提到的编程式导航中用this.$router.push()来改变路由，用this.$route.params来得到参数值")])]),t._v(" "),v("ul",[v("li",[t._v("$router为VueRouter实例，想要导航到不同URL，则使用$router.push方法。")]),t._v(" "),v("li",[t._v("$route为当前router跳转对象，里面可以获取name、path、query、params等")])]),t._v(" "),v("h3",{attrs:{id:"es6-let和const的区别？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#es6-let和const的区别？"}},[t._v("🌙")]),t._v(" es6  let和const的区别？")]),t._v(" "),v("blockquote",[v("p",[t._v("let用来声明变量，const用来声明常量，不可以修改 ，const在声明时必须被赋值  let和const是块级作用域, 在{}里就形成了一个作用域   let和const会形成暂时性死区  var 可以重复定义；let和const不可以重复定义,否则报错")])]),t._v(" "),v("h3",{attrs:{id:"vue的双向绑定原理？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue的双向绑定原理？"}},[t._v("🌙")]),t._v(" vue的双向绑定原理？")]),t._v(" "),v("blockquote",[v("p",[t._v("Vue 利用 Object.stringify 这个方法遍历 data 中所有的属性,给每个属性增加一个 setter 和 getter 方法, 当数据发生变化的时候,会触发 setter 方法, 当获取数据时,会触发 getter 方法; Object.defineProperty 在 IE8 以下不兼容,所以 Vue 只能在 IE9 以上使用")])]),t._v(" "),v("h3",{attrs:{id:"问-单向数据流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#问-单向数据流"}},[t._v("🌙")]),t._v(" 问:单向数据流")]),t._v(" "),v("ul",[v("li",[t._v("单向数据流的好处就是防止组件之间互相修改数据导致数据混乱")]),t._v(" "),v("li",[t._v("答:MVC设计模式就是单向数据流, M model 数据层 V view 视图层 C controller 控制层 控制层连接 model 和 view 通过 controller 把 model 绑定到 view 中 react 就是基于 MVC 开发的")]),t._v(" "),v("li",[t._v("答: MVVM 也有单向数据流 M model 数据层 V view 视图层 VM view-model 视图模型层 通过视图模型把数据层和视图层联系起来,可以双向数据绑定也可以单向数据绑定")]),t._v(" "),v("li",[t._v("双向数据绑定原理: Vue 利用 Object.stringify 这个方法遍历 data 中所有的属性,给每个属性增加一个 setter 和 getter 方法, 当数据发生变化的时候,会触发 setter 方法, 当获取数据时,会触发 getter 方法; Object.defineProperty 在 IE8 以下不兼容,所以 Vue 只能在 IE9 以上使用")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("let obj = {\n    _name: '123'\n};\nObject.defineProperty(obj, 'name', {\n    get() {\n        //获取 obj.name 会执行 get 方法\n        return this._name;\n    },\n    set(val) {\n        //修改 obj.name 时会执行 set 方法\n        console.log(val)\n        this._name = val\n    }\n})\n")])])]),v("h3",{attrs:{id:"浮动会带来哪些影响？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浮动会带来哪些影响？"}},[t._v("🌙")]),t._v(" 浮动会带来哪些影响？")]),t._v(" "),v("ul",[v("li",[t._v("父元素的高度无法被撑开，影响与父元素同级的元素")]),t._v(" "),v("li",[t._v("与浮动元素同级的非浮动元素（内联元素）会跟随其后")]),t._v(" "),v("li",[t._v("若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面显示的结构。")])]),t._v(" "),v("h3",{attrs:{id:"清除浮动？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#清除浮动？"}},[t._v("🌙")]),t._v(" 清除浮动？")]),t._v(" "),v("ul",[v("li",[t._v("父级 "),v("code",[t._v("div")]),t._v(" 设置一个 "),v("code",[t._v("height")]),t._v(" 属性")]),t._v(" "),v("li",[t._v("最后一个浮动元素后加空 "),v("code",[t._v("div")]),t._v(" 标签 并添加样式 "),v("code",[t._v("clear:both")])]),t._v(" "),v("li",[t._v("包含浮动元素的父标签添加样式"),v("code",[t._v("overflow")]),t._v(" 为 "),v("code",[t._v("hidden")]),t._v(" 或 "),v("code",[t._v("auto")])]),t._v(" "),v("li",[t._v("给父容器添加 "),v("code",[t._v("clearfix")]),t._v(" 的 "),v("code",[t._v("class")]),t._v(" ，用伪元素 "),v("code",[t._v("clearfix：after")]),t._v(" 来设置样式，清除浮动")])]),t._v(" "),v("h3",{attrs:{id:"dom-的操作？增加、移出、插入？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dom-的操作？增加、移出、插入？"}},[t._v("🌙")]),t._v(" DOM 的操作？增加、移出、插入？")]),t._v(" "),v("ul",[v("li",[t._v("document.createElement()动态创建")]),t._v(" "),v("li",[t._v("容器元素.appendChild()向容器元素末尾追加元素")]),t._v(" "),v("li",[t._v("容器元素.insertBefore(newEle,oldEle)把元素插入到容器指定标签之前（新元素，作为参照物的老元素）")]),t._v(" "),v("li",[t._v("父集容器.removeChild()移除元素")])]),t._v(" "),v("h3",{attrs:{id:"get和post的区别？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#get和post的区别？"}},[t._v("🌙")]),t._v(" get和post的区别？")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("get")]),t._v(" 请求通过向 url 末尾问号传参的形式向服务器传递；"),v("code",[t._v("post")]),t._v(" 请求把数据放到请求体中传递给服务器")]),t._v(" "),v("li",[v("code",[t._v("get")]),t._v(" 发送数据是把数据拼接到    url  末尾，但是 url 的总长度有限的一般IE是2k，chrome 是8k；- "),v("code",[t._v("post")]),t._v(" 发送给服务端的数据是放到请求体中，所以大小没有限制")]),t._v(" "),v("li",[v("code",[t._v("get")]),t._v(" 请求传递数据是以明文的方式传递，不安全；post 请求是把数据放到请求体里面，相对来说安全一点")]),t._v(" "),v("li",[v("code",[t._v("get")]),t._v(" 请求容易产生缓存，一般情况下访问接口的数据不需要缓存，一般情况下，我们在 url 末尾拼接随机数或者时间戳来清除缓存；post 请求不会走缓存")])]),t._v(" "),v("h3",{attrs:{id:"怎么解决跨域？jsonp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#怎么解决跨域？jsonp"}},[t._v("🌙")]),t._v(" 怎么解决跨域？jsonp")]),t._v(" "),v("ul",[v("li",[t._v("JSONP")]),t._v(" "),v("li",[t._v("服务端转发，因为同源策略只在客户端存在，在服务端是不存在的；所以可以由服务端转发请求；")]),t._v(" "),v("li",[t._v("nginx 转发，nginx 是服务器应用程序，它可以接受客户端的请求，然后根据规则可以配置自动转发；")]),t._v(" "),v("li",[t._v("CORS: Cross-Origin-Resource-Sharing: 需要目标域设置 Access-Control-Allow-Origin 头信息；")]),t._v(" "),v("li",[t._v("proxy (反向代理) 跨域")]),t._v(" "),v("li",[t._v("前端解决跨域的规范")]),t._v(" "),v("li",[t._v("jsonp")]),t._v(" "),v("li",[t._v("cors (常用)")]),t._v(" "),v("li",[t._v("iframe")]),t._v(" "),v("li",[t._v("websoket (常用)")]),t._v(" "),v("li",[t._v("nginx (常用)")]),t._v(" "),v("li",[t._v("window.name")]),t._v(" "),v("li",[t._v("正向代理 反向代理")])]),t._v(" "),v("h3",{attrs:{id:"浏览器不兼容怎么办？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器不兼容怎么办？"}},[t._v("🌙")]),t._v(" 浏览器不兼容怎么办？")]),t._v(" "),v("ul",[v("li",[t._v("答: 上家公司不需要兼容 IE 如果在项目中遇到非要兼容 IE 问题用搜索引擎查找")])]),t._v(" "),v("h3",{attrs:{id:"js的this指向，改变this指向的函数有几个？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#js的this指向，改变this指向的函数有几个？"}},[t._v("🌙")]),t._v(" js的this指向，改变this指向的函数有几个？")]),t._v(" "),v("ul",[v("li",[t._v("事件函数中的this是绑定该事件的元素")]),t._v(" "),v("li",[t._v("自执行函数中的this是window")]),t._v(" "),v("li",[t._v("定时器回调函数中的this指向window")]),t._v(" "),v("li",[t._v("方法调用时，看前面是否有点，如果有点前面是谁，this就是谁；如果没有点，this中的this就是window")]),t._v(" "),v("li",[t._v("箭头函数中的this指向函数定义时所在的作用域中的this")]),t._v(" "),v("li",[t._v("全局作用域中的this是widow")]),t._v(" "),v("li",[t._v("构造函数中的 this 指向当前实例")])]),t._v(" "),v("h3",{attrs:{id:"改变this指向：call、apply、bind-也会被问作-如何改变上下文指向"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#改变this指向：call、apply、bind-也会被问作-如何改变上下文指向"}},[t._v("🌙")]),t._v(" 改变this指向：call、apply、bind (也会被问作: 如何改变上下文指向)")]),t._v(" "),v("ul",[v("li",[t._v("call：修改函数中this的指向，并且把修改this后的函数执行，用call指定undefined和null作为this无效")]),t._v(" "),v("li",[t._v("apply：apply和call方法作用一样；修改函数中this的指向，并且把修改this后的函数执行；但是传参方式不同call方法是一个一个的传递实参给sum的，apply是把实参放到一个数组中，数组项是实参")]),t._v(" "),v("li",[t._v("bind：只修改this返回修改this后的新函数，并不会让函数执行")])]),t._v(" "),v("h3",{attrs:{id:"原型链？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#原型链？"}},[t._v("🌙")]),t._v(" 原型链？")]),t._v(" "),v("blockquote",[v("p",[t._v("对象的属性查找机制\n每个实例都有一个属性 "),v("code",[t._v("__proto__")]),t._v(" 属性，它指向当前实例所属类的  "),v("code",[t._v("prototype")]),t._v(" 对象。当我们访对象的一个的属性时，如果有，就使用私有属性，如果没有就通过实例 __proto__找到实例所属类的 prototype (原型)上查找，如果找到就使用 prototype 上的属性，如果还没找到，就通过 prototype 的 "),v("strong",[t._v("proto")]),t._v(" 继续向上查找，一直找到 Object 的 prototype 就停止查找。如果还没找到就返回 undefined。")])]),t._v(" "),v("h3",{attrs:{id:"继承？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#继承？"}},[t._v("🌙")]),t._v(" 继承？")]),t._v(" "),v("blockquote",[v("p",[t._v("原型继承是把子类公有的属性和私有的属性都变成了子类私有的属性；")])]),t._v(" "),v("ul",[v("li",[t._v("借用构造函数继承：只能把父类的私有属性和方法继承为子类的私有属性和方法；")]),t._v(" "),v("li",[t._v("组合继承：原型链继承 + 借用构造函数继承")]),t._v(" "),v("li",[t._v("原型式继承：把父类的公有属性继承为子类的公有属性；")]),t._v(" "),v("li",[t._v("寄生组合式继承：原型式继承 + 借用构造函数继承")]),t._v(" "),v("li",[t._v("冒充对象继承：在子类的构造函数中生成一个父类的实例，把父类的这个实例进行遍历，把属性都添加子类的实例上；")])]),t._v(" "),v("h3",{attrs:{id:"闭包的作用？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#闭包的作用？"}},[t._v("🌙")]),t._v(" 闭包的作用？")]),t._v(" "),v("blockquote",[v("p",[t._v("函数执行时形成一个私有作用域，保护里面的变量不受外界干扰，这种保护机制称为闭包。")])]),t._v(" "),v("ul",[v("li",[t._v("实现公有变量")]),t._v(" "),v("li",[t._v("可以做缓存")]),t._v(" "),v("li",[t._v("可以实现封装，属性私有化")]),t._v(" "),v("li",[t._v("模块化开发，防止污染全局变量")])]),t._v(" "),v("h3",{attrs:{id:"都有什么可以引起内存泄漏？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#都有什么可以引起内存泄漏？"}},[t._v("🌙")]),t._v(" 都有什么可以引起内存泄漏？")]),t._v(" "),v("blockquote",[v("p",[t._v("内存泄漏是由于分配的内存没有释放，就会造成内存泄漏。\n主要的情况有：")])]),t._v(" "),v("ul",[v("li",[t._v("全局的集合：对象加入到集合后，用完了没有在集合中删除；（用完清除，周期性地清除，反向链接计算清除）")]),t._v(" "),v("li",[t._v("缓存：没有对缓存中的结果进行移除；（移除缓存中最久的结果）")]),t._v(" "),v("li",[t._v("ClassLoader: ClassLoader 本身的复杂性以及它可能关联到其他一些对象或静态的方法。")])]),t._v(" "),v("h3",{attrs:{id:"localstorge-和-sessionstorage的区别？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#localstorge-和-sessionstorage的区别？"}},[t._v("🌙")]),t._v(" localstorge 和 sessionstorage的区别？")]),t._v(" "),v("ul",[v("li",[t._v("localStorage 是永久存储，如果不删除或者用户不清除就会一直有。")]),t._v(" "),v("li",[t._v("sessionStorage 只是会话存储，只要页面不关闭有，如果页面关闭了，就消失了。")]),t._v(" "),v("li",[t._v("sessionStorage\n需求：我从后台得到一个URL的时候，我根据路由判断用户一进入页面显示出一个蒙层，当用户进入当前页面的其他页面再返回时需要使蒙层消失，这时候我就使用到了sessionStorage以及它的特性 浏览器关闭时自动销毁，成功解决\n"),v("img",{attrs:{src:"D36FF19363E149D7AF305A0885C9BFC3",alt:"image"}})]),t._v(" "),v("li",[t._v("localStorage\n需求：页面有一个客服入口，每次进入客服时都要请求一次用户信息传给客服，这时候用到了localStorage，用户第一次进入客服时将用户信息保存在浏览器中，这样用户每次进入客服时后台都会直接获取到用户信息")])]),t._v(" "),v("h3",{attrs:{id:"做vue用什么做用户存储信息？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#做vue用什么做用户存储信息？"}},[t._v("🌙")]),t._v(" 做vue用什么做用户存储信息？")]),t._v(" "),v("blockquote",[v("p",[t._v("对于一个网站，用户登录成功，从后台获取的用户信息（用户名，id等），希望能够在header的组件中显示，那么，vue将怎样保存用户信息呢？")])]),t._v(" "),v("ul",[v("li",[t._v("这不是一个复杂的系统，我认为不需要为了保存用户信息就用vuex，而且vuex刷新后，信息就没有了。")]),t._v(" "),v("li",[t._v("使用localStorage或者sessionStorage的话，用户如果使用隐私浏览方式也无法使用。")]),t._v(" "),v("li",[t._v("而header这个组件是在login组件之后注册的，因此也不能用eventbus。")])]),t._v(" "),v("h3",{attrs:{id:"路由、导航守卫？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#路由、导航守卫？"}},[t._v("🌙")]),t._v(" 路由、导航守卫？")]),t._v(" "),v("ul",[v("li",[t._v("路由：根据不同路径，执行不同操作；vue-router 实现页面的切换，配置router以后才能使用$router对象；this.$router.go(-1)返回上一页其实是组件  this.$router.push('/list')切换到指定的路由")]),t._v(" "),v("li",[t._v("导航守卫：导航是正在发生变化的路由；从当前的组件离开准备去往下一个组件；为什么需要？真实项目中，我们需要根据用户权限、登录状态来决定用户可以看到的页面；但是路由就在浏览器地址栏里面，如果不加以拦截，用户通过在地址栏中输入，就可以看到他本不该看到的页面，所以我们用导航守卫拦截他。（全局前置导航守卫、路由独享守卫、组件内守卫）")])]),t._v(" "),v("h3",{attrs:{id:"做过小程序吗？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#做过小程序吗？"}},[t._v("🌙")]),t._v(" 做过小程序吗？")]),t._v(" "),v("ul",[v("li",[t._v("工作中没有用过 现在在学习")])]),t._v(" "),v("h3",{attrs:{id:"深拷贝和浅拷贝？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝和浅拷贝？"}},[t._v("🌙")]),t._v(" 深拷贝和浅拷贝？")]),t._v(" "),v("ul",[v("li",[t._v("浅拷贝：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。")]),t._v(" "),v("li",[t._v("深拷贝：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。JSON.parse(JSON.stringfy)")]),t._v(" "),v("li",[t._v("... es6 新增的 扩展运算符也可以进行 深复制")])])])}),[],!1,null,null,null);e.default=a.exports}}]);